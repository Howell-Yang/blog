<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TypeScript on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/tags/typescript/</link>
    <description>Recent content in TypeScript on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Jun 2020 13:55:00 -0700</lastBuildDate><atom:link href="https://www.howellyang.com/tags/typescript/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a Multi-AZ NAT Gateway with Pulumi</title>
      <link>https://www.howellyang.com/2020/06/09/creating-multi-az-nat-gateway-with-pulumi/</link>
      <pubDate>Tue, 09 Jun 2020 13:55:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/09/creating-multi-az-nat-gateway-with-pulumi/</guid>
      <description>&lt;p&gt;I recently had a need to test a configuration involving the use of a single NAT Gateway servicing multiple private subnets across multiple availability zones (AZs) within a single VPC. While there are notable caveats with such a design (see the &amp;ldquo;Caveats&amp;rdquo; section at the bottom of this article), it could make sense in some use cases. In this post, I&amp;rsquo;ll show you how I used &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; with &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to automate the creation of this design.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating an AWS VPC Endpoint with Pulumi</title>
      <link>https://www.howellyang.com/2020/01/25/creating-aws-vpc-endpoint-with-pulumi/</link>
      <pubDate>Sat, 25 Jan 2020 10:32:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/01/25/creating-aws-vpc-endpoint-with-pulumi/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;d like to show readers how to use &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to create a VPC endpoint on AWS. Until recently, I&amp;rsquo;d heard of VPC endpoints but hadn&amp;rsquo;t really taken the time to fully understand what they were or how they might be used. That changed when I was presented with a requirement for the AWS EC2 APIs to be available within a VPC that did not have Internet access. As it turns out&amp;mdash;and as many readers are probably already aware&amp;mdash;this is one of the key use cases for a VPC endpoint (see &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html&#34;&gt;the VPC endpoint docs&lt;/a&gt;). The sample code I&amp;rsquo;ll share below shows how to programmatically create a VPC endpoint for use in infrastructure-as-code use cases.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programmatically Creating Kubernetes Manifests</title>
      <link>https://www.howellyang.com/2019/10/29/programmatically-creating-kubernetes-manifests/</link>
      <pubDate>Tue, 29 Oct 2019 07:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2019/10/29/programmatically-creating-kubernetes-manifests/</guid>
      <description>&lt;p&gt;A while ago I came across &lt;a href=&#34;https://jkcfg.github.io/#/&#34;&gt;a utility named &lt;code&gt;jk&lt;/code&gt;&lt;/a&gt;, which purported to be able to create structured text files&amp;mdash;in JSON, YAML, or HCL&amp;mdash;using JavaScript (or TypeScript that has been transpiled into JavaScript). One of the use cases was creating &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; manifests. The &lt;a href=&#34;https://github.com/jkcfg/jk&#34;&gt;GitHub repository for &lt;code&gt;jk&lt;/code&gt;&lt;/a&gt; describes it as &amp;ldquo;a data templating tool&amp;rdquo;, and that&amp;rsquo;s accurate for simple use cases. In more complex use cases, the use of a general-purpose programming language like JavaScript in &lt;code&gt;jk&lt;/code&gt; reveals that the tool has the potential to be much more than just a data templating tool&amp;mdash;if you have the JavaScript expertise to unlock that potential.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Tagged Subnets Across AWS AZs Using Pulumi</title>
      <link>https://www.howellyang.com/2019/08/21/creating-tagged-subnets-across-aws-azs-using-pulumi/</link>
      <pubDate>Wed, 21 Aug 2019 21:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2019/08/21/creating-tagged-subnets-across-aws-azs-using-pulumi/</guid>
      <description>&lt;p&gt;As I mentioned back in May in &lt;a href=&#34;https://www.howellyang.com/2019/05/05/a-sandbox-for-learning-pulumi/&#34;&gt;this post on creating a sandbox for learning Pulumi&lt;/a&gt;, I&amp;rsquo;ve started using &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; more and more of my infrastructure-as-code needs. I did switch from JavaScript to TypeScript (which I know compiles to JavaScript on the back-end, but the strong typing helps a new programmer like me). Recently I had a need to create some resources in AWS using Pulumi, and&amp;mdash;for reasons I&amp;rsquo;ll explain shortly&amp;mdash;many of the &amp;ldquo;canned&amp;rdquo; Pulumi examples didn&amp;rsquo;t cut it for my use case. In this post, I&amp;rsquo;ll share how I created tagged subnets across AWS availability zones (AZs) using Pulumi.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
