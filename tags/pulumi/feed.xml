<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pulumi on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/tags/pulumi/</link>
    <description>Recent content in Pulumi on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 May 2022 08:45:00 -0600</lastBuildDate><atom:link href="https://www.howellyang.com/tags/pulumi/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Technology Short Take 155</title>
      <link>https://www.howellyang.com/2022/05/27/technology-short-take-155/</link>
      <pubDate>Fri, 27 May 2022 08:45:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2022/05/27/technology-short-take-155/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #155, just in time for the 2022 Memorial Day holiday weekend! (Here in the US, at least.) I mean, don&amp;rsquo;t you want to spend this weekend catching up on some technology-related articles instead of cooking on the grill and gathering with friends and family? I certainly hope not! Still, for those who need a little technology fix over the weekend, hopefully I&amp;rsquo;ve included something useful in the list of articles below. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 154</title>
      <link>https://www.howellyang.com/2022/04/29/technology-short-take-154/</link>
      <pubDate>Fri, 29 Apr 2022 09:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2022/04/29/technology-short-take-154/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #154! My link of links and articles from around the Internet is a bit light on networking and virtualization this time around, but heftier in the security, cloud, and OS/application sections. I hope that I&amp;rsquo;ve managed to include something that you&amp;rsquo;ll find useful. Enjoy the content!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 149</title>
      <link>https://www.howellyang.com/2021/12/10/technology-short-take-149/</link>
      <pubDate>Fri, 10 Dec 2021 11:50:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/12/10/technology-short-take-149/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #149! I&amp;rsquo;ll have one more Technology Short Take in 2021, scheduled for three weeks from now (on the last day of the year!). For now, though, I have a small collection of articles and links for your reading pleasure&amp;mdash;not as many as I usually include in a Technology Short Take, but better than nothing at all (I hope!). Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Establishing VPC Peering with Pulumi and Go</title>
      <link>https://www.howellyang.com/2021/08/26/establishing-vpc-peering-with-pulumi-and-go/</link>
      <pubDate>Thu, 26 Aug 2021 09:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/26/establishing-vpc-peering-with-pulumi-and-go/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to manage my lab infrastructure on &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; (I shared some of the details in &lt;a href=&#34;https://www.pulumi.com/blog/supporting-kubernetes-with-pulumi/&#34;&gt;this April 2020 blog post&lt;/a&gt; published on the Pulumi site). Originally I started with &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, but later switched to &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. Recently I had a need to add some VPC peering relationships to my lab configuration. I was concerned that this may pose some problems&amp;mdash;due entirely to the way I structure my Pulumi projects and stacks&amp;mdash;but as it turned out it was more straightforward than I expected. In this post, I&amp;rsquo;ll share some example code and explain what I learned in the process of writing it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 141</title>
      <link>https://www.howellyang.com/2021/06/18/technology-short-take-141/</link>
      <pubDate>Fri, 18 Jun 2021 07:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/06/18/technology-short-take-141/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #141! This is the first Technology Short Take compiled, written, and published entirely on my M1-based MacBook Pro (see &lt;a href=&#34;https://www.howellyang.com/2021/06/02/review-2020-m1-based-macbook-pro/&#34;&gt;my review here&lt;/a&gt;). The collection of links shared below covers a fairly wide range of topics, from old Sun hardware to working with serverless frameworks in the public cloud. I hope that you find something useful here. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 140</title>
      <link>https://www.howellyang.com/2021/05/07/technology-short-take-140/</link>
      <pubDate>Fri, 07 May 2021 09:15:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/05/07/technology-short-take-140/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #140! It&amp;rsquo;s hard to believe it&amp;rsquo;s already the start of May 2021&amp;mdash;my how time flies! In this Technology Short Take, I&amp;rsquo;ve gathered some links for you covering topics like Azure and AWS networking, moving from macOS to Linux (and back again), and more. Let&amp;rsquo;s jump right into the content!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Considerations for using IaC with Cluster API</title>
      <link>https://www.howellyang.com/2020/10/08/considerations-for-using-iac-with-cluster-api/</link>
      <pubDate>Thu, 08 Oct 2020 08:50:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/10/08/considerations-for-using-iac-with-cluster-api/</guid>
      <description>&lt;p&gt;In other posts on this site, I&amp;rsquo;ve talked about both infrastructure-as-code (see &lt;a href=&#34;https://www.howellyang.com/tags/terraform&#34;&gt;my posts on Terraform&lt;/a&gt; or &lt;a href=&#34;https://www.howellyang.com/tags/pulumi&#34;&gt;my posts on Pulumi&lt;/a&gt;) and somewhat separately I&amp;rsquo;ve talked about Cluster API (see &lt;a href=&#34;https://www.howellyang.com/tags/capi&#34;&gt;my posts on Cluster API&lt;/a&gt;). And while I&amp;rsquo;ve discussed the idea of &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;using existing AWS infrastructure with Cluster API&lt;/a&gt;, in this post I wanted to try to think about how these two technologies play together, and provide some considerations for using them together.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating an AWS ELB using Pulumi and Go</title>
      <link>https://www.howellyang.com/2020/07/29/creating-an-aws-elb-using-pulumi-and-go/</link>
      <pubDate>Wed, 29 Jul 2020 17:10:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/07/29/creating-an-aws-elb-using-pulumi-and-go/</guid>
      <description>&lt;p&gt;In case you hadn&amp;rsquo;t noticed, I&amp;rsquo;ve been on a bit of a kick with &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; and &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; recently. There are two reasons for this. First, I have a number of &amp;ldquo;learning projects&amp;rdquo; (things that I decide I&amp;rsquo;d like to try or test) that would benefit greatly from the use of infrastructure as code. Second, I&amp;rsquo;ve been working on getting more familiar with Go. The idea of combining both those reasons by using Pulumi with Go seemed natural. Unfortunately, examples of using Pulumi with Go seem to be more limited than examples of using Pulumi with other languages, so in this post I&amp;rsquo;d like to share how to create an AWS ELB using Pulumi and Go.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating an AWS Security Group using Pulumi and Go</title>
      <link>https://www.howellyang.com/2020/07/01/creating-aws-security-group-using-pulumi-and-go/</link>
      <pubDate>Wed, 01 Jul 2020 17:20:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/07/01/creating-aws-security-group-using-pulumi-and-go/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;m going to share some examples of how to create an AWS security group using &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; and &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. I&amp;rsquo;m sharing these examples because&amp;mdash;as of this writing&amp;mdash;the Pulumi site does not provide any examples on how this is done using Go. There &lt;em&gt;are&lt;/em&gt; examples for the other languages supported by Pulumi, but not for Go. The syntax is, to me at least, somewhat counterintuitive, although I freely admit this could be due to the fact that I am still pretty new to Go and its syntax.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adopting the Default Route Table of an AWS VPC using Pulumi and Go</title>
      <link>https://www.howellyang.com/2020/06/25/adopting-default-route-table-aws-vpc-using-pulumi-go/</link>
      <pubDate>Thu, 25 Jun 2020 10:15:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/25/adopting-default-route-table-aws-vpc-using-pulumi-go/</guid>
      <description>&lt;p&gt;Up until now, when I used &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to create infrastructure on AWS, my code would create all-new infrastructure: a new VPC, new subnets, new route tables, new Internet gateway, etc. One thing bothered me, though: when I created a new VPC, that new VPC automatically came with a default route table. My code, however, would create a new route table and then explicitly associate the subnets with that new route table. This seemed less than ideal. (What can I say? I&amp;rsquo;m a stickler for details.) While building a &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;-based replacement for my existing TypeScript code, I found a way to resolve this duplication of resources. In this post, I&amp;rsquo;ll show you how to &amp;ldquo;adopt&amp;rdquo; the default route table of an AWS VPC so that you can manage it in your Pulumi code.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting AWS Availability Zones using Pulumi and Go</title>
      <link>https://www.howellyang.com/2020/06/24/getting-aws-availability-zones-using-pulumi-and-go/</link>
      <pubDate>Wed, 24 Jun 2020 09:45:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/24/getting-aws-availability-zones-using-pulumi-and-go/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written several different articles on &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; (take a look at &lt;a href=&#34;https://www.howellyang.com/tags/pulumi/&#34;&gt;all articles tagged &amp;ldquo;Pulumi&amp;rdquo;&lt;/a&gt;), the infrastructure-as-code tool that allows users to define their infrastructure using a general-purpose programming language instead of a domain-specific language (DSL). Thus far, my work with Pulumi has leveraged TypeScript, but moving forward I&amp;rsquo;m going to start sharing more Pulumi code written using &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. In this post, I&amp;rsquo;ll share how to use Pulumi and Go to get a list of Availability Zones (AZs) from a particular region in AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 128</title>
      <link>https://www.howellyang.com/2020/06/19/technology-short-take-128/</link>
      <pubDate>Fri, 19 Jun 2020 11:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/19/technology-short-take-128/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #128! It looks like I&amp;rsquo;m settling into a roughly monthly cadence with the Technology Short Takes. This time around, I&amp;rsquo;ve got a (hopefully) interesting collection of links. The collection seems a tad heavier than normal in the hardware and security sections, probably due to new exploits discovered in Intel&amp;rsquo;s speculative execution functionality. In any case, here&amp;rsquo;s what I&amp;rsquo;ve gathered for you. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating a Multi-AZ NAT Gateway with Pulumi</title>
      <link>https://www.howellyang.com/2020/06/09/creating-multi-az-nat-gateway-with-pulumi/</link>
      <pubDate>Tue, 09 Jun 2020 13:55:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/09/creating-multi-az-nat-gateway-with-pulumi/</guid>
      <description>&lt;p&gt;I recently had a need to test a configuration involving the use of a single NAT Gateway servicing multiple private subnets across multiple availability zones (AZs) within a single VPC. While there are notable caveats with such a design (see the &amp;ldquo;Caveats&amp;rdquo; section at the bottom of this article), it could make sense in some use cases. In this post, I&amp;rsquo;ll show you how I used &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; with &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to automate the creation of this design.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 126</title>
      <link>https://www.howellyang.com/2020/04/24/technology-short-take-126/</link>
      <pubDate>Fri, 24 Apr 2020 19:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/24/technology-short-take-126/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #126! I meant to get this published last Friday, but completely forgot. So, I added a couple more links and instead have it ready for you today. I don&amp;rsquo;t have any links for servers/hardware or security in today&amp;rsquo;s Short Take, but hopefully there&amp;rsquo;s enough linked content in the other sections that you&amp;rsquo;ll still find something useful. Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using External Etcd with Cluster API on AWS</title>
      <link>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</link>
      <pubDate>Thu, 23 Apr 2020 10:25:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve used &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API (CAPI)&lt;/a&gt;, you may have noticed that workload clusters created by CAPI use, by default, a &amp;ldquo;stacked master&amp;rdquo; configuration&amp;mdash;that is, the etcd cluster is running co-located on the control plane node(s) alongside the Kubernetes control plane components. This is a very common configuration and is well-suited for most deployments, so it makes perfect sense that this is the default. There may be cases, however, where you&amp;rsquo;ll want to use a dedicated, external etcd cluster for your Kubernetes clusters. In this post, I&amp;rsquo;ll show you how to use an external etcd cluster with CAPI on AWS.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
