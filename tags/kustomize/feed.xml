<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kustomize on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/tags/kustomize/</link>
    <description>Recent content in Kustomize on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Jan 2022 09:00:00 +0000</lastBuildDate><atom:link href="https://www.howellyang.com/tags/kustomize/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Test-Driven Development for Kustomize Overlays</title>
      <link>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</link>
      <pubDate>Mon, 10 Jan 2022 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</guid>
      <description>&lt;p&gt;I am by no means a developer (not by a long shot!), but I have been learning lots of development-related things over the last several years and trying to incorporate those into my workflows. One of these is the idea of &lt;em&gt;test-driven development&lt;/em&gt; (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Wikipedia&lt;/a&gt; for a definition and some additional information), in which one writes tests to validate functionality before writing the code to implement said functionality (pardon the paraphrasing). In this post, I&amp;rsquo;ll discuss how to use &lt;a href=&#34;https://www.conftest.dev/&#34;&gt;&lt;code&gt;conftest&lt;/code&gt;&lt;/a&gt; to (loosely) implement test-driven development for &lt;a href=&#34;https://kubernetes-sigs.github.io/kustomize/&#34;&gt;Kustomize&lt;/a&gt; overlays.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize Components with Cluster API</title>
      <link>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</link>
      <pubDate>Mon, 01 Nov 2021 10:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://kustomize.io&#34;&gt;Kustomize&lt;/a&gt; with &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; (CAPI) to manage my AWS-based &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters for quite a while (along with &lt;a href=&#34;https://www.pulumi.com&#34;&gt;Pulumi&lt;/a&gt; for managing the underlying AWS infrastructure). For all the time I&amp;rsquo;ve been using this approach, I&amp;rsquo;ve also been unhappy with the overlay-based approach that had evolved as a way of managing multiple workload clusters. With the recent release of CAPI 1.0 and the v1beta1 API, I took this opportunity to see if there was a better way. I found a different way&amp;mdash;time will tell if it is a better way. In this post, I&amp;rsquo;ll share how I&amp;rsquo;m using Kustomize components to help streamline managing multiple CAPI workload clusters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Reusable Kuma Installation YAML</title>
      <link>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</link>
      <pubDate>Thu, 21 Oct 2021 09:15:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</guid>
      <description>&lt;p&gt;Using CLI tools&amp;mdash;instead of a &amp;ldquo;wall of YAML&amp;rdquo;&amp;mdash;to install things onto &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; is a growing trend, it seems. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; and &lt;a href=&#34;https://cilium.io&#34;&gt;Cilium&lt;/a&gt;, for example, each have a CLI tool for installing their respective project. I get the reasons why; you can build logic into a CLI tool that you can&amp;rsquo;t build into a YAML file. &lt;a href=&#34;https://kuma.io&#34;&gt;Kuma&lt;/a&gt;, the open source service mesh maintained largely by Kong and a CNCF Sandbox project, takes a similar approach with its &lt;code&gt;kumactl&lt;/code&gt; tool. In this post, however, I&amp;rsquo;d like to take a look at creating reusable YAML to install Kuma, instead of using the CLI tool every time you install.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kustomize Transformer Configurations for Cluster API v1beta1</title>
      <link>https://www.howellyang.com/2021/10/11/kustomize-transformer-configurations-for-cluster-api-v1beta1/</link>
      <pubDate>Mon, 11 Oct 2021 16:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/11/kustomize-transformer-configurations-for-cluster-api-v1beta1/</guid>
      <description>&lt;p&gt;The topic of combining &lt;a href=&#34;https://kustomize.io/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API&lt;/a&gt; (CAPI) is a topic I&amp;rsquo;ve touched on several times over the last 18-24 months. I first touched on this topic in November 2019 with a post on &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with CAPI manifests&lt;/a&gt;. A short while later, I discovered a way to change the configurations for the &lt;code&gt;kustomize&lt;/code&gt; transformers to make it easier to use it with CAPI. That resulted in two posts on changing the &lt;code&gt;kustomize&lt;/code&gt; transformers: &lt;a href=&#34;https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/&#34;&gt;one for v1alpha2&lt;/a&gt; and &lt;a href=&#34;https://www.howellyang.com/2020/03/17/kustomize-transformer-configuration-cluster-api-v1alpha3/&#34;&gt;one for v1alpha3&lt;/a&gt; (since there were changes to the API between versions). In this post, I&amp;rsquo;ll revisit &lt;code&gt;kustomize&lt;/code&gt; transformer configurations again, this time for CAPI v1beta1 (the API version corresponding to the CAPI 1.0 release).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding Multiple Items Using Kustomize JSON 6902 Patches</title>
      <link>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</link>
      <pubDate>Wed, 07 Jul 2021 17:50:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</guid>
      <description>&lt;p&gt;Recently, I needed to deploy a &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; cluster via &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API (CAPI)&lt;/a&gt; into a pre-existing AWS VPC. As I outlined in &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;this post&lt;/a&gt; from September 2019, this entails modifying the CAPI manifest to include the VPC ID and any associated subnet IDs, as well as &lt;a href=&#34;https://www.howellyang.com/2020/04/22/using-existing-aws-security-groups-with-cluster-api/&#34;&gt;referencing existing security groups&lt;/a&gt; where needed. I knew that I could use &lt;a href=&#34;https://kustomize.sigs.k8s.io/&#34;&gt;the &lt;code&gt;kustomize&lt;/code&gt; tool&lt;/a&gt; to make these changes in a declarative way, as I&amp;rsquo;d explored &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API manifests&lt;/a&gt; some time ago. This time, though, I needed to add a list of items, not just modify an existing value. In this post, I&amp;rsquo;ll show you how I used a JSON 6902 patch with &lt;code&gt;kustomize&lt;/code&gt; to add a list of items to a CAPI manifest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding a MachineHealthCheck using Kustomize</title>
      <link>https://www.howellyang.com/2021/03/19/adding-a-machinehealthcheck-with-kustomize/</link>
      <pubDate>Fri, 19 Mar 2021 08:45:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/03/19/adding-a-machinehealthcheck-with-kustomize/</guid>
      <description>&lt;p&gt;MachineHealthChecks are a powerful feature in the Kubernetes &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; (CAPI), and something I played around with not too long ago on &lt;a href=&#34;https://tgik.io/143&#34;&gt;TGIK 143&lt;/a&gt;. Recently, I was helping to document the use of &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; with Cluster API for inclusion in the upstream CAPI documentation, and I learned a simple trick with &lt;code&gt;kustomize&lt;/code&gt; that I&amp;rsquo;d apparently overlooked in the past. If you&amp;rsquo;ve used &lt;code&gt;kustomize&lt;/code&gt; for any great length of time you probably already know and have used the functionality I&amp;rsquo;ll describe in this post, but if you&amp;rsquo;re new to &lt;code&gt;kustomize&lt;/code&gt; or, like me, a user of &lt;code&gt;kustomize&lt;/code&gt; that hasn&amp;rsquo;t had time to dig into all of its functionality, then read on and see how you can use &lt;code&gt;kustomize&lt;/code&gt; to add a MachineHealthCheck to a CAPI workload cluster.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kustomize Transformer Configurations for Cluster API v1alpha3</title>
      <link>https://www.howellyang.com/2020/03/17/kustomize-transformer-configuration-cluster-api-v1alpha3/</link>
      <pubDate>Tue, 17 Mar 2020 15:42:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/17/kustomize-transformer-configuration-cluster-api-v1alpha3/</guid>
      <description>&lt;p&gt;A few days ago I wrote an article on &lt;a href=&#34;https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/&#34;&gt;configuring &lt;code&gt;kustomize&lt;/code&gt; transformers&lt;/a&gt; for use with &lt;a href=&#34;https://cluster-api.sigs.k8s.io/introduction.html&#34;&gt;Cluster API (CAPI)&lt;/a&gt;, in which I explored how users could configure the &lt;code&gt;kustomize&lt;/code&gt; transformers&amp;mdash;the parts of &lt;code&gt;kustomize&lt;/code&gt; that actually modify objects&amp;mdash;to be a bit more CAPI-aware. By doing so, using &lt;code&gt;kustomize&lt;/code&gt; with CAPI manifests becomes much easier. Since that post, the CAPI team released v1alpha3. In working with v1alpha3, I realized my &lt;code&gt;kustomize&lt;/code&gt; transformer configurations were incorrect. In this post, I will share CAPI v1alpha3 configurations for &lt;code&gt;kustomize&lt;/code&gt; transformers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuring Kustomize Transformers for Cluster API</title>
      <link>https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/</link>
      <pubDate>Fri, 13 Mar 2020 09:55:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/</guid>
      <description>&lt;p&gt;In November 2019 I wrote an article on &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API (CAPI) manifests&lt;/a&gt;. The idea was to use &lt;code&gt;kustomize&lt;/code&gt; to simplify the management of CAPI manifests for clusters that are generally similar but have minor differences (like the AWS region in which they are running, or the number of Machines in a MachineDeployment). In this post, I&amp;rsquo;d like to show a slightly different way of using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API that involves configuring the &lt;code&gt;kustomize&lt;/code&gt; transformers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize with Cluster API Manifests</title>
      <link>https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/</link>
      <pubDate>Tue, 12 Nov 2019 19:57:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/</guid>
      <description>&lt;p&gt;A topic that&amp;rsquo;s been in the back of my mind since writing &lt;a href=&#34;https://www.howellyang.com/2019/08/26/an-introduction-to-kubernetes-cluster-api/&#34;&gt;the Cluster API introduction post&lt;/a&gt; is how someone could use &lt;a href=&#34;https://kustomize.io/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; to modify the &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api&#34;&gt;Cluster API&lt;/a&gt; manifests. Fortunately, this is reasonably straightforward. It doesn&amp;rsquo;t require any &amp;ldquo;hacks&amp;rdquo; like those needed to &lt;a href=&#34;https://www.howellyang.com/2019/10/16/using-kustomize-with-kubeadm-configuration-files/&#34;&gt;use &lt;code&gt;kustomize&lt;/code&gt; with &lt;code&gt;kubeadm&lt;/code&gt; configuration files&lt;/a&gt;, but similar to modifying &lt;code&gt;kubeadm&lt;/code&gt; configuration files you&amp;rsquo;ll generally need to use the patching functionality of &lt;code&gt;kustomize&lt;/code&gt; when working with Cluster API manifests. In this post, I&amp;rsquo;d like to take a fairly detailed look at how someone might go about using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize with Kubeadm Configuration Files</title>
      <link>https://www.howellyang.com/2019/10/16/using-kustomize-with-kubeadm-configuration-files/</link>
      <pubDate>Wed, 16 Oct 2019 10:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2019/10/16/using-kustomize-with-kubeadm-configuration-files/</guid>
      <description>&lt;p&gt;Last week I had a crazy idea: if &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; can be used to modify YAML files like &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; manifests, then could one use &lt;code&gt;kustomize&lt;/code&gt; to modify a &lt;code&gt;kubeadm&lt;/code&gt; configuration file, which is also a YAML manifest? So I asked about it in one of the Kubernetes-related channels in Slack at work, and as it turns out it&amp;rsquo;s not such a crazy idea after all! So, in this post, I&amp;rsquo;ll show you how to use &lt;code&gt;kustomize&lt;/code&gt; to modify &lt;code&gt;kubeadm&lt;/code&gt; configuration files.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Introduction to Kustomize</title>
      <link>https://www.howellyang.com/2019/09/13/an-introduction-to-kustomize/</link>
      <pubDate>Fri, 13 Sep 2019 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2019/09/13/an-introduction-to-kustomize/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://kustomize.io&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; is a tool designed to let users &amp;ldquo;customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is&amp;rdquo; (wording taken directly from &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize&#34;&gt;the &lt;code&gt;kustomize&lt;/code&gt; GitHub repository&lt;/a&gt;). Users can run &lt;code&gt;kustomize&lt;/code&gt; directly, or&amp;mdash;starting with &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; 1.14&amp;mdash;use &lt;code&gt;kubectl -k&lt;/code&gt; to access the functionality (although the standalone binary is newer than the functionality built into &lt;code&gt;kubectl&lt;/code&gt; as of the Kubernetes 1.15 release). In this post, I&amp;rsquo;d like to provide an introduction to &lt;code&gt;kustomize&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
