<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etcd on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/tags/etcd/</link>
    <description>Recent content in etcd on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Aug 2021 15:25:00 -0600</lastBuildDate><atom:link href="https://www.howellyang.com/tags/etcd/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>An Alternate Approach to etcd Certificate Generation with Kubeadm</title>
      <link>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</link>
      <pubDate>Tue, 03 Aug 2021 15:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a fair amount about &lt;code&gt;kubeadm&lt;/code&gt;, which was my preferred way of bootstrapping &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters until &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; arrived. Along the way, I&amp;rsquo;ve also discussed using &lt;code&gt;kubeadm&lt;/code&gt; to assist with setting up etcd, the distributed key-value store leveraged by the Kubernetes control plane (see &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/&#34;&gt;here&lt;/a&gt;). In this post, I&amp;rsquo;d like to revisit the topic of using &lt;code&gt;kubeadm&lt;/code&gt; to set up an etcd cluster once again, this time taking a look at an alternate approach to generating the necessary TLS certificates than what the official documentation describes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 142</title>
      <link>https://www.howellyang.com/2021/07/16/technology-short-take-142/</link>
      <pubDate>Fri, 16 Jul 2021 13:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/07/16/technology-short-take-142/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #142! This time around, the Networking section is a bit light, but I&amp;rsquo;ve got plenty of cloud computing links and articles for you to enjoy, along with some stuff on OSes and applications, programming, and soft skills. Hopefully there&amp;rsquo;s something useful here for you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up etcd with etcdadm</title>
      <link>https://www.howellyang.com/2020/04/23/setting-up-etcd-with-etcdadm/</link>
      <pubDate>Thu, 23 Apr 2020 20:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/23/setting-up-etcd-with-etcdadm/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a few different posts on setting up &lt;a href=&#34;https://etcd.io/&#34;&gt;etcd&lt;/a&gt;. There&amp;rsquo;s this one on &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;bootstrapping a TLS-secured etcd cluster with &lt;code&gt;kubeadm&lt;/code&gt;&lt;/a&gt;, and there&amp;rsquo;s this one about &lt;a href=&#34;https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/&#34;&gt;using &lt;code&gt;kubeadm&lt;/code&gt; to run an etcd cluster as static Pods&lt;/a&gt;. There&amp;rsquo;s also this one about &lt;a href=&#34;https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/&#34;&gt;using &lt;code&gt;kubeadm&lt;/code&gt; to run etcd with containerd&lt;/a&gt;. In this article, I&amp;rsquo;ll provide yet another way of setting up a &amp;ldquo;best practices&amp;rdquo; etcd cluster, this time using a tool named &lt;code&gt;etcdadm&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using External Etcd with Cluster API on AWS</title>
      <link>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</link>
      <pubDate>Thu, 23 Apr 2020 10:25:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve used &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API (CAPI)&lt;/a&gt;, you may have noticed that workload clusters created by CAPI use, by default, a &amp;ldquo;stacked master&amp;rdquo; configuration&amp;mdash;that is, the etcd cluster is running co-located on the control plane node(s) alongside the Kubernetes control plane components. This is a very common configuration and is well-suited for most deployments, so it makes perfect sense that this is the default. There may be cases, however, where you&amp;rsquo;ll want to use a dedicated, external etcd cluster for your Kubernetes clusters. In this post, I&amp;rsquo;ll show you how to use an external etcd cluster with CAPI on AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Setting up etcd with Kubeadm, containerd Edition</title>
      <link>https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/</link>
      <pubDate>Thu, 02 Apr 2020 09:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/</guid>
      <description>&lt;p&gt;In late 2018, I wrote a couple of blog posts on using &lt;code&gt;kubeadm&lt;/code&gt; to set up an etcd cluster. The first one was &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;this post&lt;/a&gt;, which used &lt;code&gt;kubeadm&lt;/code&gt; only to generate the TLS certs but ran etcd as a systemd service. I followed up that up a couple months later with &lt;a href=&#34;https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/&#34;&gt;this post&lt;/a&gt;, which used &lt;code&gt;kubeadm&lt;/code&gt; to run etcd as a static Pod on each system. It&amp;rsquo;s that latter post&amp;mdash;running etcd as a static Pod on each system in the cluster&amp;mdash;that I&amp;rsquo;ll be revisiting in this post, only this time using &lt;a href=&#34;https://containerd.io/&#34;&gt;containerd&lt;/a&gt; as the container runtime instead of Docker.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More on Setting up etcd with Kubeadm</title>
      <link>https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/</link>
      <pubDate>Mon, 29 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/</guid>
      <description>&lt;p&gt;A while ago I wrote about &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;using &lt;code&gt;kubeadm&lt;/code&gt; to bootstrap an etcd cluster with TLS&lt;/a&gt;. In that post, I talked about one way to establish a secure etcd cluster using &lt;code&gt;kubeadm&lt;/code&gt; and running etcd as systemd units. In this post, I want to focus on a slightly different approach: running etcd as static pods. The information on this post is intended to build upon the information already available in the Kubernetes official documentation, not serve as a replacement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bootstrapping an etcd Cluster with TLS using Kubeadm</title>
      <link>https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/</link>
      <pubDate>Tue, 21 Aug 2018 13:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/coreos/etcd/&#34;&gt;etcd distributed key-value store&lt;/a&gt; is an integral part of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;. I first wrote about etcd back in 2014 in &lt;a href=&#34;https://www.howellyang.com/2014/08/18/coreos-continued-etcd/&#34;&gt;this post&lt;/a&gt;, but haven&amp;rsquo;t really discussed it in any great detail since then. However, as part of my recent efforts to dive &lt;em&gt;much&lt;/em&gt; deeper into Kubernetes, I needed to revisit etcd. In this post, I wanted to share how to boostrap a new etcd cluster with TLS certificates using &lt;code&gt;kubeadm&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Terraform to Build an etcd2 Cluster on OpenStack</title>
      <link>https://www.howellyang.com/2016/05/06/using-terraform-etcd2-openstack/</link>
      <pubDate>Fri, 06 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2016/05/06/using-terraform-etcd2-openstack/</guid>
      <description>In this post I&amp;rsquo;ll build on my earlier introduction to Terraform to show a practical example of using Terraform to build a CoreOS-based etcd2 cluster on OpenStack. This information is based upon a demo that I created for a session at the Austin OpenStack Summit in late April, so all the files I reference in this post are available in the GitHub repo for that session.
You may recall that Terraform is a platform-independent orchestration tool that allows you to create configurations (in either Terraform format or JSON format) specifying resources to be created/modified/deleted.</description>
    </item>
    
    <item>
      <title>Running an etcd-Backed Docker Swarm Cluster</title>
      <link>https://www.howellyang.com/2015/04/19/running-etcd-backed-docker-swarm-cluster/</link>
      <pubDate>Sun, 19 Apr 2015 07:05:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2015/04/19/running-etcd-backed-docker-swarm-cluster/</guid>
      <description>In this post, I&amp;rsquo;ll build on a couple of previous posts and show you how to build your own Docker Swarm cluster that leverages etcd for cluster node discovery. This post builds on the information presented on how to run an etcd 2.0 cluster on Ubuntu as well as the information found in this post on running a Consul-backed Docker Swarm cluster.
To help you follow along, I&amp;rsquo;ve created a Vagrant environment that you can use to turn up the configuration described in this blog post.</description>
    </item>
    
    <item>
      <title>Running an etcd 2.0 Cluster on Ubuntu 14.04</title>
      <link>https://www.howellyang.com/2015/04/15/running-etcd-20-cluster/</link>
      <pubDate>Wed, 15 Apr 2015 14:35:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2015/04/15/running-etcd-20-cluster/</guid>
      <description>In this post, I&amp;rsquo;m going to show you how to set up a cluster of three nodes running etcd 2.0 (specifically, etcd 2.0.9). While I&amp;rsquo;ve discussed etcd before, that was in the context of using etcd with CoreOS Linux. In this case, I&amp;rsquo;ll use Ubuntu 14.04 as the base OS, along with the latest released version of etcd.
To help you follow along, I&amp;rsquo;ve created a set of files that will allow you to use Vagrant to turn up an etcd 2.</description>
    </item>
    
    <item>
      <title>Using Vagrant with CoreOS, etcd, fleet, and Docker</title>
      <link>https://www.howellyang.com/2015/02/05/vagrant-coreos-etcd-fleet-docker/</link>
      <pubDate>Thu, 05 Feb 2015 11:50:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2015/02/05/vagrant-coreos-etcd-fleet-docker/</guid>
      <description>As a follow-up to my recent #vBrownBag session on &amp;ldquo;Docker and Friends,&amp;rdquo; I wanted to provide a quick and relatively easy way for VMware administrators to experiment with some of the technologies I demonstrated. Since not everyone has their own OpenStack cloud running in their basement, Vagrant seemed like a reasonable solution. So, in this post, I&amp;rsquo;ll show you how to use Vagrant to experiment with some of the technologies I demonstrated in the #vBrownBag session.</description>
    </item>
    
    <item>
      <title>CoreOS Continued: etcd</title>
      <link>https://www.howellyang.com/2014/08/18/coreos-continued-etcd/</link>
      <pubDate>Mon, 18 Aug 2014 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2014/08/18/coreos-continued-etcd/</guid>
      <description>In this post, I&amp;rsquo;m going to build on my earlier introduction to CoreOS by taking a slightly more detailed look at etcd. etcd is a distributed key-value store (more on that in a moment) and is one of the key technologies that I feel distinguishes CoreOS from other Linux distributions.
etcd is not, of course, the only distributed key-value store in town. Zookeeper is another very well-known distributed information store. I&amp;rsquo;m focusing on etcd here for two reasons.</description>
    </item>
    
  </channel>
</rss>
