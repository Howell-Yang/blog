<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CLI on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/tags/cli/</link>
    <description>Recent content in CLI on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 May 2022 16:00:00 -0600</lastBuildDate><atom:link href="https://www.howellyang.com/tags/cli/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git Difftool and Meld as a Flatpak</title>
      <link>https://www.howellyang.com/2022/05/27/git-difftool-and-meld-as-a-flatpak/</link>
      <pubDate>Fri, 27 May 2022 16:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2022/05/27/git-difftool-and-meld-as-a-flatpak/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently started migrating many of the applications on my &lt;a href=&#34;https://getfedora.org/&#34;&gt;Fedora&lt;/a&gt; 36 laptop to their &lt;a href=&#34;https://www.flatpak.org/&#34;&gt;Flatpak&lt;/a&gt; versions. For the most part, this has been pretty straightforward, although there isn&amp;rsquo;t really any method for migrating configuration and data. Today I ran into a problem with &lt;a href=&#34;https://meldmerge.org/&#34;&gt;Meld&lt;/a&gt;, a graphical diff utility, and using it with the &lt;code&gt;git difftool&lt;/code&gt; command. Below I&amp;rsquo;ll share how I worked around this problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using cert-manager with Kuma for mTLS</title>
      <link>https://www.howellyang.com/2022/02/17/using-cert-manager-with-kuma-mtls/</link>
      <pubDate>Thu, 17 Feb 2022 08:45:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2022/02/17/using-cert-manager-with-kuma-mtls/</guid>
      <description>&lt;p&gt;When configuring mutual TLS (mTLS) on &lt;a href=&#34;https://kuma.io/&#34;&gt;the open source Kuma service mesh&lt;/a&gt;, users have a couple of different options. They can use a &amp;ldquo;builtin&amp;rdquo; certificate authority (CA), in which Kuma itself will generate a CA certificate and key for use in creating service-specific mTLS certificates. Users also have the option of using a &amp;ldquo;provided&amp;rdquo; CA, in which they must supply a CA certificate and key for Kuma to use when creating service-specific mTLS certificates. Both of these options are described &lt;a href=&#34;https://kuma.io/docs/1.4.x/policies/mutual-tls/&#34;&gt;on this page in the Kuma documentation&lt;/a&gt;. In this post, I&amp;rsquo;d like to explore the use of &lt;a href=&#34;https://cert-manager.io/&#34;&gt;cert-manager&lt;/a&gt; as a &amp;ldquo;provided&amp;rdquo; CA for mTLS on Kuma.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Certificate Details from HashiCorp Vault</title>
      <link>https://www.howellyang.com/2022/01/12/getting-certificate-details-from-hashicorp-vault/</link>
      <pubDate>Wed, 12 Jan 2022 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2022/01/12/getting-certificate-details-from-hashicorp-vault/</guid>
      <description>&lt;p&gt;It seems there are lots of tutorials on setting up a PKI (public key infrastructure) using &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;HashiCorp Vault&lt;/a&gt;. What I&amp;rsquo;ve found missing from most of these tutorials, however, is how to get details on certificates issued by a Vault-driven PKI &lt;em&gt;after&lt;/em&gt; the initial creation. For example, someone other than you issued a certificate, but now you need to get the details for said certificate. How is that done? In this post, I&amp;rsquo;ll show you a couple ways to get details on certificates issued and stored in HashiCorp Vault.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Test-Driven Development for Kustomize Overlays</title>
      <link>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</link>
      <pubDate>Mon, 10 Jan 2022 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</guid>
      <description>&lt;p&gt;I am by no means a developer (not by a long shot!), but I have been learning lots of development-related things over the last several years and trying to incorporate those into my workflows. One of these is the idea of &lt;em&gt;test-driven development&lt;/em&gt; (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Wikipedia&lt;/a&gt; for a definition and some additional information), in which one writes tests to validate functionality before writing the code to implement said functionality (pardon the paraphrasing). In this post, I&amp;rsquo;ll discuss how to use &lt;a href=&#34;https://www.conftest.dev/&#34;&gt;&lt;code&gt;conftest&lt;/code&gt;&lt;/a&gt; to (loosely) implement test-driven development for &lt;a href=&#34;https://kubernetes-sigs.github.io/kustomize/&#34;&gt;Kustomize&lt;/a&gt; overlays.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 149</title>
      <link>https://www.howellyang.com/2021/12/10/technology-short-take-149/</link>
      <pubDate>Fri, 10 Dec 2021 11:50:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/12/10/technology-short-take-149/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #149! I&amp;rsquo;ll have one more Technology Short Take in 2021, scheduled for three weeks from now (on the last day of the year!). For now, though, I have a small collection of articles and links for your reading pleasure&amp;mdash;not as many as I usually include in a Technology Short Take, but better than nothing at all (I hope!). Enjoy!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize Components with Cluster API</title>
      <link>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</link>
      <pubDate>Mon, 01 Nov 2021 10:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://kustomize.io&#34;&gt;Kustomize&lt;/a&gt; with &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; (CAPI) to manage my AWS-based &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters for quite a while (along with &lt;a href=&#34;https://www.pulumi.com&#34;&gt;Pulumi&lt;/a&gt; for managing the underlying AWS infrastructure). For all the time I&amp;rsquo;ve been using this approach, I&amp;rsquo;ve also been unhappy with the overlay-based approach that had evolved as a way of managing multiple workload clusters. With the recent release of CAPI 1.0 and the v1beta1 API, I took this opportunity to see if there was a better way. I found a different way&amp;mdash;time will tell if it is a better way. In this post, I&amp;rsquo;ll share how I&amp;rsquo;m using Kustomize components to help streamline managing multiple CAPI workload clusters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Reusable Kuma Installation YAML</title>
      <link>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</link>
      <pubDate>Thu, 21 Oct 2021 09:15:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</guid>
      <description>&lt;p&gt;Using CLI tools&amp;mdash;instead of a &amp;ldquo;wall of YAML&amp;rdquo;&amp;mdash;to install things onto &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; is a growing trend, it seems. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; and &lt;a href=&#34;https://cilium.io&#34;&gt;Cilium&lt;/a&gt;, for example, each have a CLI tool for installing their respective project. I get the reasons why; you can build logic into a CLI tool that you can&amp;rsquo;t build into a YAML file. &lt;a href=&#34;https://kuma.io&#34;&gt;Kuma&lt;/a&gt;, the open source service mesh maintained largely by Kong and a CNCF Sandbox project, takes a similar approach with its &lt;code&gt;kumactl&lt;/code&gt; tool. In this post, however, I&amp;rsquo;d like to take a look at creating reusable YAML to install Kuma, instead of using the CLI tool every time you install.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the External AWS Cloud Provider for Kubernetes</title>
      <link>https://www.howellyang.com/2021/10/12/using-the-external-aws-cloud-provider-for-kubernetes/</link>
      <pubDate>Tue, 12 Oct 2021 12:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/12/using-the-external-aws-cloud-provider-for-kubernetes/</guid>
      <description>&lt;p&gt;In 2018, after finding a dearth of information on setting up &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; with AWS integration/support, I set out to try to establish some level of documentation on this topic. That effort resulted in a few different blog posts, but ultimately culminated in &lt;a href=&#34;https://www.howellyang.com/2019/08/14/setting-up-aws-integrated-kubernetes-115-cluster-kubeadm/&#34;&gt;this post on setting up an AWS-integrated Kubernetes cluster using &lt;code&gt;kubeadm&lt;/code&gt;&lt;/a&gt;. Although originally written for Kubernetes 1.15, the process described in that post is still accurate for newer versions of Kubernetes. With the release of Kubernetes 1.22, though, the in-tree AWS cloud provider&amp;mdash;which is what is used/described in the post linked above&amp;mdash;has been deprecated in favor of &lt;a href=&#34;https://github.com/kubernetes/cloud-provider-aws&#34;&gt;the external cloud provider&lt;/a&gt;. In this post, I&amp;rsquo;ll show how to set up an AWS-integrated Kubernetes cluster using the external AWS cloud provider.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kustomize Transformer Configurations for Cluster API v1beta1</title>
      <link>https://www.howellyang.com/2021/10/11/kustomize-transformer-configurations-for-cluster-api-v1beta1/</link>
      <pubDate>Mon, 11 Oct 2021 16:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/11/kustomize-transformer-configurations-for-cluster-api-v1beta1/</guid>
      <description>&lt;p&gt;The topic of combining &lt;a href=&#34;https://kustomize.io/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API&lt;/a&gt; (CAPI) is a topic I&amp;rsquo;ve touched on several times over the last 18-24 months. I first touched on this topic in November 2019 with a post on &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with CAPI manifests&lt;/a&gt;. A short while later, I discovered a way to change the configurations for the &lt;code&gt;kustomize&lt;/code&gt; transformers to make it easier to use it with CAPI. That resulted in two posts on changing the &lt;code&gt;kustomize&lt;/code&gt; transformers: &lt;a href=&#34;https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/&#34;&gt;one for v1alpha2&lt;/a&gt; and &lt;a href=&#34;https://www.howellyang.com/2020/03/17/kustomize-transformer-configuration-cluster-api-v1alpha3/&#34;&gt;one for v1alpha3&lt;/a&gt; (since there were changes to the API between versions). In this post, I&amp;rsquo;ll revisit &lt;code&gt;kustomize&lt;/code&gt; transformer configurations again, this time for CAPI v1beta1 (the API version corresponding to the CAPI 1.0 release).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the AWS CLI to Tag Groups of AWS Resources</title>
      <link>https://www.howellyang.com/2021/08/23/using-aws-cli-tag-groups-of-aws-resources/</link>
      <pubDate>Mon, 23 Aug 2021 12:20:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/23/using-aws-cli-tag-groups-of-aws-resources/</guid>
      <description>&lt;p&gt;To conduct some testing, I recently needed to spin up a group of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; clusters on AWS. Generally speaking, my &amp;ldquo;weapon of choice&amp;rdquo; for something like this is &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API (CAPI)&lt;/a&gt; with the AWS provider. Normally this would be enormously simple. In this particular case&amp;mdash;for reasons that I won&amp;rsquo;t bother going into here&amp;mdash;I needed to spin up all these clusters in a single VPC. This presents a problem for the &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws/&#34;&gt;Cluster API Provider for AWS (CAPA)&lt;/a&gt;, as it currently doesn&amp;rsquo;t add some required tags to existing AWS infrastructure (see &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws/issues/2584&#34;&gt;this issue&lt;/a&gt;). The fix is to add the tags manually, so in this post I&amp;rsquo;ll share how I used the AWS CLI to add the necessary tags.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 143</title>
      <link>https://www.howellyang.com/2021/08/06/technology-short-take-143/</link>
      <pubDate>Fri, 06 Aug 2021 08:45:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/06/technology-short-take-143/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #143! I have what I think is an interesting list of links to share with you this time around. Since taking my new job at Kong, I&amp;rsquo;ve been spending more time with Envoy, so you&amp;rsquo;ll see some Envoy-related content showing up in this Technology Short Take. I hope this collection of links has something useful for you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Starting WireGuard Interfaces Automatically with Launchd on macOS</title>
      <link>https://www.howellyang.com/2021/08/04/starting-wireguard-interfaces-automatically-launchd-macos/</link>
      <pubDate>Wed, 04 Aug 2021 06:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/04/starting-wireguard-interfaces-automatically-launchd-macos/</guid>
      <description>&lt;p&gt;In late June of this year, I wrote a piece on &lt;a href=&#34;https://www.howellyang.com/2021/06/28/using-wireguard-on-mac-via-cli/&#34;&gt;using WireGuard on macOS via the CLI&lt;/a&gt;, where I walked readers using macOS through how to configure and use the &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard VPN&lt;/a&gt; from the terminal (as opposed to using the GUI client, which I discussed &lt;a href=&#34;https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/&#34;&gt;here&lt;/a&gt;). In that post, I briefly mentioned that I was planning to explore how to have macOS&amp;rsquo; &lt;code&gt;launchd&lt;/code&gt; automatically start WireGuard interfaces. In this post, I&amp;rsquo;ll show you how to do exactly that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Alternate Approach to etcd Certificate Generation with Kubeadm</title>
      <link>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</link>
      <pubDate>Tue, 03 Aug 2021 15:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a fair amount about &lt;code&gt;kubeadm&lt;/code&gt;, which was my preferred way of bootstrapping &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters until &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; arrived. Along the way, I&amp;rsquo;ve also discussed using &lt;code&gt;kubeadm&lt;/code&gt; to assist with setting up etcd, the distributed key-value store leveraged by the Kubernetes control plane (see &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/&#34;&gt;here&lt;/a&gt;). In this post, I&amp;rsquo;d like to revisit the topic of using &lt;code&gt;kubeadm&lt;/code&gt; to set up an etcd cluster once again, this time taking a look at an alternate approach to generating the necessary TLS certificates than what the official documentation describes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Technology Short Take 142</title>
      <link>https://www.howellyang.com/2021/07/16/technology-short-take-142/</link>
      <pubDate>Fri, 16 Jul 2021 13:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/07/16/technology-short-take-142/</guid>
      <description>&lt;p&gt;Welcome to Technology Short Take #142! This time around, the Networking section is a bit light, but I&amp;rsquo;ve got plenty of cloud computing links and articles for you to enjoy, along with some stuff on OSes and applications, programming, and soft skills. Hopefully there&amp;rsquo;s something useful here for you!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding Multiple Items Using Kustomize JSON 6902 Patches</title>
      <link>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</link>
      <pubDate>Wed, 07 Jul 2021 17:50:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</guid>
      <description>&lt;p&gt;Recently, I needed to deploy a &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; cluster via &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API (CAPI)&lt;/a&gt; into a pre-existing AWS VPC. As I outlined in &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;this post&lt;/a&gt; from September 2019, this entails modifying the CAPI manifest to include the VPC ID and any associated subnet IDs, as well as &lt;a href=&#34;https://www.howellyang.com/2020/04/22/using-existing-aws-security-groups-with-cluster-api/&#34;&gt;referencing existing security groups&lt;/a&gt; where needed. I knew that I could use &lt;a href=&#34;https://kustomize.sigs.k8s.io/&#34;&gt;the &lt;code&gt;kustomize&lt;/code&gt; tool&lt;/a&gt; to make these changes in a declarative way, as I&amp;rsquo;d explored &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API manifests&lt;/a&gt; some time ago. This time, though, I needed to add a list of items, not just modify an existing value. In this post, I&amp;rsquo;ll show you how I used a JSON 6902 patch with &lt;code&gt;kustomize&lt;/code&gt; to add a list of items to a CAPI manifest.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
