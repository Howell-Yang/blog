<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Explanation on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/categories/explanation/</link>
    <description>Recent content in Explanation on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 12 May 2022 14:30:00 -0600</lastBuildDate><atom:link href="https://www.howellyang.com/categories/explanation/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fine-Tuning Control Plane Access with Cluster API</title>
      <link>https://www.howellyang.com/2022/05/12/fine-tuning-control-plane-access-with-cluster-api/</link>
      <pubDate>Thu, 12 May 2022 14:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2022/05/12/fine-tuning-control-plane-access-with-cluster-api/</guid>
      <description>&lt;p&gt;When &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; creates a workload cluster, it also creates a load balancing solution to handle traffic to the workload cluster&amp;rsquo;s control plane. This is necessary so that the control plane endpoint is decoupled from the underlying control plane nodes (which facilitates scaling the control plane, among other things). On AWS, this mean creating an ELB and a set of security groups. For flexibility, Cluster API provides a limited ability to customize this control plane load balancer. In this post, I&amp;rsquo;ll show you how to use this functionality to fine-tune access to a workload cluster&amp;rsquo;s control plane when using Cluster API with AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Considerations for using IaC with Cluster API</title>
      <link>https://www.howellyang.com/2020/10/08/considerations-for-using-iac-with-cluster-api/</link>
      <pubDate>Thu, 08 Oct 2020 08:50:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/10/08/considerations-for-using-iac-with-cluster-api/</guid>
      <description>&lt;p&gt;In other posts on this site, I&amp;rsquo;ve talked about both infrastructure-as-code (see &lt;a href=&#34;https://www.howellyang.com/tags/terraform&#34;&gt;my posts on Terraform&lt;/a&gt; or &lt;a href=&#34;https://www.howellyang.com/tags/pulumi&#34;&gt;my posts on Pulumi&lt;/a&gt;) and somewhat separately I&amp;rsquo;ve talked about Cluster API (see &lt;a href=&#34;https://www.howellyang.com/tags/capi&#34;&gt;my posts on Cluster API&lt;/a&gt;). And while I&amp;rsquo;ve discussed the idea of &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;using existing AWS infrastructure with Cluster API&lt;/a&gt;, in this post I wanted to try to think about how these two technologies play together, and provide some considerations for using them together.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Unison Across Linux, macOS, and Windows</title>
      <link>https://www.howellyang.com/2020/06/01/using-unison-across-linux-macos-windows/</link>
      <pubDate>Mon, 01 Jun 2020 09:40:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/06/01/using-unison-across-linux-macos-windows/</guid>
      <description>&lt;p&gt;I recently wrapped up an instance where I needed to use the &lt;a href=&#34;https://www.cis.upenn.edu/~bcpierce/unison/index.html&#34;&gt;Unison file synchronization application&lt;/a&gt; across Linux, macOS, and Windows. While Unison &lt;em&gt;is&lt;/em&gt; available for all three platforms and &lt;em&gt;does&lt;/em&gt; work across (and among) systems running all three operating systems, I did encounter a few interoperability issues while making it work. Here&amp;rsquo;s some information on these interoperability issues, and how I worked around them. (Hopefully this information will help someone else.)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using External Etcd with Cluster API on AWS</title>
      <link>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</link>
      <pubDate>Thu, 23 Apr 2020 10:25:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/23/using-external-etcd-with-cluster-api-on-aws/</guid>
      <description>&lt;p&gt;If you&amp;rsquo;ve used &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API (CAPI)&lt;/a&gt;, you may have noticed that workload clusters created by CAPI use, by default, a &amp;ldquo;stacked master&amp;rdquo; configuration&amp;mdash;that is, the etcd cluster is running co-located on the control plane node(s) alongside the Kubernetes control plane components. This is a very common configuration and is well-suited for most deployments, so it makes perfect sense that this is the default. There may be cases, however, where you&amp;rsquo;ll want to use a dedicated, external etcd cluster for your Kubernetes clusters. In this post, I&amp;rsquo;ll show you how to use an external etcd cluster with CAPI on AWS.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Existing AWS Security Groups with Cluster API</title>
      <link>https://www.howellyang.com/2020/04/22/using-existing-aws-security-groups-with-cluster-api/</link>
      <pubDate>Wed, 22 Apr 2020 16:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/22/using-existing-aws-security-groups-with-cluster-api/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written before about &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;how to use existing AWS infrastructure with Cluster API (CAPI)&lt;/a&gt;, and I was recently able to help update &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws/blob/master/docs/existing-aws-infrastructure.md&#34;&gt;the upstream documentation&lt;/a&gt; on this topic (the upstream documentation should now be considered the authoritative source). These instructions are perfect for placing a Kubernetes cluster into an existing VPC and associated subnets, but there&amp;rsquo;s one scenario that they don&amp;rsquo;t yet address: what if you need your CAPI workload cluster to be able to communicate with other EC2 instances or other AWS services in the same VPC? In this post, I&amp;rsquo;ll show you the CAPI functionality that makes this possible.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Paw to Launch an EC2 Instance via API Calls</title>
      <link>https://www.howellyang.com/2020/04/12/using-paw-to-launch-ec2-instance-via-api-calls/</link>
      <pubDate>Sun, 12 Apr 2020 07:05:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/12/using-paw-to-launch-ec2-instance-via-api-calls/</guid>
      <description>&lt;p&gt;Last week I wrote a post on &lt;a href=&#34;https://www.howellyang.com/2020/04/10/using-postman-to-launch-ec2-instance-via-api-calls/&#34;&gt;using Postman to launch an EC2 instance via API calls&lt;/a&gt;. &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; is a cross-platform application, so while my post was centered around Postman on Linux (&lt;a href=&#34;https://ubuntu.com/&#34;&gt;Ubuntu&lt;/a&gt;, specifically) the steps should be very similar&amp;mdash;if not exactly the same&amp;mdash;when using Postman on other platforms. Users of macOS, however, have another option: a macOS-specific peer to Postman named &lt;a href=&#34;https://paw.cloud/&#34;&gt;Paw&lt;/a&gt;. In this post, I&amp;rsquo;ll walk through using Paw to issue API requests to AWS to launch an EC2 instance.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Postman to Launch an EC2 Instance via API Calls</title>
      <link>https://www.howellyang.com/2020/04/10/using-postman-to-launch-ec2-instance-via-api-calls/</link>
      <pubDate>Fri, 10 Apr 2020 15:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/10/using-postman-to-launch-ec2-instance-via-api-calls/</guid>
      <description>&lt;p&gt;As I mentioned in this post on &lt;a href=&#34;https://www.howellyang.com/2020/02/27/region-endpoint-match-in-aws-api-requests/&#34;&gt;region and endpoint match in AWS API requests&lt;/a&gt;, exploring the AWS APIs is something I&amp;rsquo;ve been doing off and on for several months. There&amp;rsquo;s a couple reasons for this; I&amp;rsquo;ll go into those in a bit more detail shortly. In any case, I&amp;rsquo;ve been exploring the APIs using &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; (when on Linux) and &lt;a href=&#34;https://paw.cloud&#34;&gt;Paw&lt;/a&gt; (when on macOS), and in this post I&amp;rsquo;ll share how to use Postman to launch an EC2 instance via API calls.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making File URLs Work Again in Firefox</title>
      <link>https://www.howellyang.com/2020/04/04/making-file-urls-work-again-in-firefox/</link>
      <pubDate>Sat, 04 Apr 2020 19:45:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/04/04/making-file-urls-work-again-in-firefox/</guid>
      <description>&lt;p&gt;At some point in the last year or so&amp;mdash;I don&amp;rsquo;t know exactly when it happened&amp;mdash;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/&#34;&gt;Firefox&lt;/a&gt;, along with most of the other major browsers, stopped working with &lt;code&gt;file://&lt;/code&gt; URLs. This is a shame, because I like &lt;a href=&#34;https://www.howellyang.com/2017/03/07/linux-migration-creating-presentations/&#34;&gt;using Markdown for presentations&lt;/a&gt; (at least, when it&amp;rsquo;s a presentation where I don&amp;rsquo;t need to collaborate with others). However, using this sort of approach generally requires support for &lt;code&gt;file://&lt;/code&gt; URLs (or requires running a local web server). In this post, I&amp;rsquo;ll show you how to make &lt;code&gt;file://&lt;/code&gt; URLs work again in Firefox.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HA Kubernetes Clusters on AWS with Cluster API v1alpha3</title>
      <link>https://www.howellyang.com/2020/03/26/ha-kubernetes-clusters-on-aws-with-cluster-api-v1alpha3/</link>
      <pubDate>Thu, 26 Mar 2020 09:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/26/ha-kubernetes-clusters-on-aws-with-cluster-api-v1alpha3/</guid>
      <description>&lt;p&gt;A few weeks ago, I published a post on &lt;a href=&#34;https://www.howellyang.com/2020/03/05/ha-kubernetes-clusters-on-aws-with-cluster-api-v1alpha2/&#34;&gt;HA Kubernetes clusters on AWS with Cluster API v1alpha2&lt;/a&gt;. That post was itself a follow-up to a post I wrote in September 2019 on &lt;a href=&#34;https://www.howellyang.com/2019/09/05/highly-available-kubernetes-clusters-on-aws-with-cluster-api/&#34;&gt;setting up HA clusters using Cluster API v1alpha1&lt;/a&gt;. In this post, I&amp;rsquo;ll follow up on both of those posts with a look at setting up HA Kubernetes clusters on AWS using &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API&lt;/a&gt; v1alpha3. Although this post is similar to the v1alpha2 post, be aware there are some notable changes in v1alpha3, particularly with regard to the control plane.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuring Kustomize Transformers for Cluster API</title>
      <link>https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/</link>
      <pubDate>Fri, 13 Mar 2020 09:55:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/13/configuring-kustomize-transformers-for-cluster-api/</guid>
      <description>&lt;p&gt;In November 2019 I wrote an article on &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API (CAPI) manifests&lt;/a&gt;. The idea was to use &lt;code&gt;kustomize&lt;/code&gt; to simplify the management of CAPI manifests for clusters that are generally similar but have minor differences (like the AWS region in which they are running, or the number of Machines in a MachineDeployment). In this post, I&amp;rsquo;d like to show a slightly different way of using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API that involves configuring the &lt;code&gt;kustomize&lt;/code&gt; transformers.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Modifying Visual Studio Code&#39;s Bracketing Behavior</title>
      <link>https://www.howellyang.com/2020/03/08/modifying-visual-studio-code-bracketing-behavior/</link>
      <pubDate>Sun, 08 Mar 2020 17:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/08/modifying-visual-studio-code-bracketing-behavior/</guid>
      <description>&lt;p&gt;There are two things I&amp;rsquo;ve missed since I switched from &lt;a href=&#34;https://www.sublimetext.com/&#34;&gt;Sublime Text&lt;/a&gt; to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; (I switched in 2018). First, the &lt;em&gt;speed.&lt;/em&gt; Sublime Text is &lt;em&gt;so&lt;/em&gt; much faster than Visual Studio Code; it&amp;rsquo;s insane. But, the team behind Visual Studio Code is working hard to improve performance, so I&amp;rsquo;ve mostly resigned myself to it. The second thing, though, was the behavior of wrapping selected text in brackets (or parentheses, curly braces, quotes, etc.). That part has annoyed me for two years, until this past weekend I&amp;rsquo;d finally had enough. Here&amp;rsquo;s how I modified Visual Studio Code&amp;rsquo;s bracketing behaviors.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HA Kubernetes Clusters on AWS with Cluster API v1alpha2</title>
      <link>https://www.howellyang.com/2020/03/05/ha-kubernetes-clusters-on-aws-with-cluster-api-v1alpha2/</link>
      <pubDate>Thu, 05 Mar 2020 12:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/03/05/ha-kubernetes-clusters-on-aws-with-cluster-api-v1alpha2/</guid>
      <description>&lt;p&gt;About six months ago, I wrote &lt;a href=&#34;https://www.howellyang.com/2019/09/05/highly-available-kubernetes-clusters-on-aws-with-cluster-api/&#34;&gt;a post&lt;/a&gt; on how to use &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api/&#34;&gt;Cluster API&lt;/a&gt; (specifically, the &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws&#34;&gt;Cluster API Provider for AWS&lt;/a&gt;) to establish highly available &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; clusters on AWS. That post was written with Cluster API (CAPI) v1alpha1 in mind. Although the concepts I presented there worked with v1alpha2 (released shortly after that post was written), I thought it might be helpful to revisit the topic with CAPI v1alpha2 specifically in mind. So, with that, here&amp;rsquo;s how to establish highly available Kubernetes clusters on AWS using CAPI v1alpha2.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Region and Endpoint Match in AWS API Requests</title>
      <link>https://www.howellyang.com/2020/02/27/region-endpoint-match-in-aws-api-requests/</link>
      <pubDate>Thu, 27 Feb 2020 09:45:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/02/27/region-endpoint-match-in-aws-api-requests/</guid>
      <description>&lt;p&gt;Interacting directly with the AWS APIs&amp;mdash;using a tool like &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt; (or, since I switched back to macOS, an application named &lt;a href=&#34;https://paw.cloud/&#34;&gt;Paw&lt;/a&gt;)&amp;mdash;is something I&amp;rsquo;ve been doing off and on for a little while as a way of gaining a slightly deeper understanding of the APIs that tools like &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt;, and others are calling when automating AWS. For a while, I struggled with AWS authentication, and after seeing Mark Brookfield&amp;rsquo;s post on &lt;a href=&#34;https://virtualhobbit.com/2020/02/26/wednesday-tidbit-using-postman-to-authenticate-to-aws/&#34;&gt;using Postman to authenticate to AWS&lt;/a&gt; I thought it might be helpful to share what I learned as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Retrieving the Kubeconfig for a Cluster API Workload Cluster</title>
      <link>https://www.howellyang.com/2020/02/19/retrieving-kubeconfig-cluster-api-workload-cluster/</link>
      <pubDate>Wed, 19 Feb 2020 16:30:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/02/19/retrieving-kubeconfig-cluster-api-workload-cluster/</guid>
      <description>&lt;p&gt;Using &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api&#34;&gt;Cluster API&lt;/a&gt; allows users to create new &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; clusters easily using manifests that define the desired state of the new cluster (also referred to as a workload cluster; see &lt;a href=&#34;https://www.howellyang.com/2019/08/26/an-introduction-to-kubernetes-cluster-api/&#34;&gt;here&lt;/a&gt; for more terminology). But how does one go about accessing this new workload cluster once it&amp;rsquo;s up and running? In this post, I&amp;rsquo;ll show you how to retrieve the Kubeconfig file for a new workload cluster created by Cluster API.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize with Cluster API Manifests</title>
      <link>https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/</link>
      <pubDate>Tue, 12 Nov 2019 19:57:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/</guid>
      <description>&lt;p&gt;A topic that&amp;rsquo;s been in the back of my mind since writing &lt;a href=&#34;https://www.howellyang.com/2019/08/26/an-introduction-to-kubernetes-cluster-api/&#34;&gt;the Cluster API introduction post&lt;/a&gt; is how someone could use &lt;a href=&#34;https://kustomize.io/&#34;&gt;&lt;code&gt;kustomize&lt;/code&gt;&lt;/a&gt; to modify the &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api&#34;&gt;Cluster API&lt;/a&gt; manifests. Fortunately, this is reasonably straightforward. It doesn&amp;rsquo;t require any &amp;ldquo;hacks&amp;rdquo; like those needed to &lt;a href=&#34;https://www.howellyang.com/2019/10/16/using-kustomize-with-kubeadm-configuration-files/&#34;&gt;use &lt;code&gt;kustomize&lt;/code&gt; with &lt;code&gt;kubeadm&lt;/code&gt; configuration files&lt;/a&gt;, but similar to modifying &lt;code&gt;kubeadm&lt;/code&gt; configuration files you&amp;rsquo;ll generally need to use the patching functionality of &lt;code&gt;kustomize&lt;/code&gt; when working with Cluster API manifests. In this post, I&amp;rsquo;d like to take a fairly detailed look at how someone might go about using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
