<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/categories/tutorial/</link>
    <description>Recent content in Tutorial on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Feb 2022 08:45:00 -0700</lastBuildDate><atom:link href="https://www.howellyang.com/categories/tutorial/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using cert-manager with Kuma for mTLS</title>
      <link>https://www.howellyang.com/2022/02/17/using-cert-manager-with-kuma-mtls/</link>
      <pubDate>Thu, 17 Feb 2022 08:45:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2022/02/17/using-cert-manager-with-kuma-mtls/</guid>
      <description>&lt;p&gt;When configuring mutual TLS (mTLS) on &lt;a href=&#34;https://kuma.io/&#34;&gt;the open source Kuma service mesh&lt;/a&gt;, users have a couple of different options. They can use a &amp;ldquo;builtin&amp;rdquo; certificate authority (CA), in which Kuma itself will generate a CA certificate and key for use in creating service-specific mTLS certificates. Users also have the option of using a &amp;ldquo;provided&amp;rdquo; CA, in which they must supply a CA certificate and key for Kuma to use when creating service-specific mTLS certificates. Both of these options are described &lt;a href=&#34;https://kuma.io/docs/1.4.x/policies/mutual-tls/&#34;&gt;on this page in the Kuma documentation&lt;/a&gt;. In this post, I&amp;rsquo;d like to explore the use of &lt;a href=&#34;https://cert-manager.io/&#34;&gt;cert-manager&lt;/a&gt; as a &amp;ldquo;provided&amp;rdquo; CA for mTLS on Kuma.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Certificate Details from HashiCorp Vault</title>
      <link>https://www.howellyang.com/2022/01/12/getting-certificate-details-from-hashicorp-vault/</link>
      <pubDate>Wed, 12 Jan 2022 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2022/01/12/getting-certificate-details-from-hashicorp-vault/</guid>
      <description>&lt;p&gt;It seems there are lots of tutorials on setting up a PKI (public key infrastructure) using &lt;a href=&#34;https://www.vaultproject.io/&#34;&gt;HashiCorp Vault&lt;/a&gt;. What I&amp;rsquo;ve found missing from most of these tutorials, however, is how to get details on certificates issued by a Vault-driven PKI &lt;em&gt;after&lt;/em&gt; the initial creation. For example, someone other than you issued a certificate, but now you need to get the details for said certificate. How is that done? In this post, I&amp;rsquo;ll show you a couple ways to get details on certificates issued and stored in HashiCorp Vault.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Test-Driven Development for Kustomize Overlays</title>
      <link>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</link>
      <pubDate>Mon, 10 Jan 2022 09:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2022/01/10/using-test-driven-development-for-kustomize-overlays/</guid>
      <description>&lt;p&gt;I am by no means a developer (not by a long shot!), but I have been learning lots of development-related things over the last several years and trying to incorporate those into my workflows. One of these is the idea of &lt;em&gt;test-driven development&lt;/em&gt; (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Test-driven_development&#34;&gt;Wikipedia&lt;/a&gt; for a definition and some additional information), in which one writes tests to validate functionality before writing the code to implement said functionality (pardon the paraphrasing). In this post, I&amp;rsquo;ll discuss how to use &lt;a href=&#34;https://www.conftest.dev/&#34;&gt;&lt;code&gt;conftest&lt;/code&gt;&lt;/a&gt; to (loosely) implement test-driven development for &lt;a href=&#34;https://kubernetes-sigs.github.io/kustomize/&#34;&gt;Kustomize&lt;/a&gt; overlays.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Kustomize Components with Cluster API</title>
      <link>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</link>
      <pubDate>Mon, 01 Nov 2021 10:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/11/01/using-kustomize-components-with-cluster-api/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been using &lt;a href=&#34;https://kustomize.io&#34;&gt;Kustomize&lt;/a&gt; with &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; (CAPI) to manage my AWS-based &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters for quite a while (along with &lt;a href=&#34;https://www.pulumi.com&#34;&gt;Pulumi&lt;/a&gt; for managing the underlying AWS infrastructure). For all the time I&amp;rsquo;ve been using this approach, I&amp;rsquo;ve also been unhappy with the overlay-based approach that had evolved as a way of managing multiple workload clusters. With the recent release of CAPI 1.0 and the v1beta1 API, I took this opportunity to see if there was a better way. I found a different way&amp;mdash;time will tell if it is a better way. In this post, I&amp;rsquo;ll share how I&amp;rsquo;m using Kustomize components to help streamline managing multiple CAPI workload clusters.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Influencing Cluster API AMI Selection</title>
      <link>https://www.howellyang.com/2021/10/25/influencing-cluster-api-ami-selection/</link>
      <pubDate>Mon, 25 Oct 2021 09:45:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/25/influencing-cluster-api-ami-selection/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Kubernetes Cluster API (CAPI) project&lt;/a&gt;&amp;mdash;which recently released v1.0&amp;mdash;can, if you wish, help manage the underlying infrastructure associated with a cluster. (You&amp;rsquo;re also fully able to have CAPI &lt;a href=&#34;https://cluster-api-aws.sigs.k8s.io/topics/consuming-existing-aws-infrastructure.html&#34;&gt;use existing infrastructure&lt;/a&gt; as well.) Speaking specifically of &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt;, this means that the &lt;a href=&#34;https://cluster-api-aws.sigs.k8s.io/&#34;&gt;Cluster API Provider for AWS&lt;/a&gt; is able to manage VPCs, subnets, routes and route tables, gateways, and&amp;mdash;of course&amp;mdash;EC2 instances. These EC2 instances are booted from a set of AMIs (Amazon Machine Images, definitely pronounced &amp;ldquo;ay-em-eye&amp;rdquo; with &lt;a href=&#34;https://blog.technodrone.cloud/2019/03/ami-has-3-syllables-ami-aws.html&#34;&gt;three syllables&lt;/a&gt;) that are prepared and maintained by the CAPI project. In this short and simple post, I&amp;rsquo;ll show you how to influence the AMI selection process that CAPI&amp;rsquo;s AWS provider uses.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Creating Reusable Kuma Installation YAML</title>
      <link>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</link>
      <pubDate>Thu, 21 Oct 2021 09:15:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/21/creating-reusable-kuma-installation-yaml/</guid>
      <description>&lt;p&gt;Using CLI tools&amp;mdash;instead of a &amp;ldquo;wall of YAML&amp;rdquo;&amp;mdash;to install things onto &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; is a growing trend, it seems. &lt;a href=&#34;https://istio.io&#34;&gt;Istio&lt;/a&gt; and &lt;a href=&#34;https://cilium.io&#34;&gt;Cilium&lt;/a&gt;, for example, each have a CLI tool for installing their respective project. I get the reasons why; you can build logic into a CLI tool that you can&amp;rsquo;t build into a YAML file. &lt;a href=&#34;https://kuma.io&#34;&gt;Kuma&lt;/a&gt;, the open source service mesh maintained largely by Kong and a CNCF Sandbox project, takes a similar approach with its &lt;code&gt;kumactl&lt;/code&gt; tool. In this post, however, I&amp;rsquo;d like to take a look at creating reusable YAML to install Kuma, instead of using the CLI tool every time you install.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the External AWS Cloud Provider for Kubernetes</title>
      <link>https://www.howellyang.com/2021/10/12/using-the-external-aws-cloud-provider-for-kubernetes/</link>
      <pubDate>Tue, 12 Oct 2021 12:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/12/using-the-external-aws-cloud-provider-for-kubernetes/</guid>
      <description>&lt;p&gt;In 2018, after finding a dearth of information on setting up &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; with AWS integration/support, I set out to try to establish some level of documentation on this topic. That effort resulted in a few different blog posts, but ultimately culminated in &lt;a href=&#34;https://www.howellyang.com/2019/08/14/setting-up-aws-integrated-kubernetes-115-cluster-kubeadm/&#34;&gt;this post on setting up an AWS-integrated Kubernetes cluster using &lt;code&gt;kubeadm&lt;/code&gt;&lt;/a&gt;. Although originally written for Kubernetes 1.15, the process described in that post is still accurate for newer versions of Kubernetes. With the release of Kubernetes 1.22, though, the in-tree AWS cloud provider&amp;mdash;which is what is used/described in the post linked above&amp;mdash;has been deprecated in favor of &lt;a href=&#34;https://github.com/kubernetes/cloud-provider-aws&#34;&gt;the external cloud provider&lt;/a&gt;. In this post, I&amp;rsquo;ll show how to set up an AWS-integrated Kubernetes cluster using the external AWS cloud provider.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Cilium via a ClusterResourceSet</title>
      <link>https://www.howellyang.com/2021/10/07/installing-cilium-via-clusterresourceset/</link>
      <pubDate>Thu, 07 Oct 2021 10:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/10/07/installing-cilium-via-clusterresourceset/</guid>
      <description>&lt;p&gt;In this post, I&amp;rsquo;m going to walk you through how to install &lt;a href=&#34;https://cilium.io/&#34;&gt;Cilium&lt;/a&gt; onto a &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API&lt;/a&gt;-managed workload cluster using a ClusterResourceSet. It&amp;rsquo;s reasonable to consider this post a follow-up to my earlier post that walked you through &lt;a href=&#34;https://www.howellyang.com/2021/03/02/deploying-a-cni-automatically-with-a-clusterresourceset/&#34;&gt;using a ClusterResourceSet to install Calico&lt;/a&gt;. There&amp;rsquo;s no need to read the earlier post, though, as this post includes all the information (or links to the information) you need. Ready? Let&amp;rsquo;s jump in!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Establishing VPC Peering with Pulumi and Go</title>
      <link>https://www.howellyang.com/2021/08/26/establishing-vpc-peering-with-pulumi-and-go/</link>
      <pubDate>Thu, 26 Aug 2021 09:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/26/establishing-vpc-peering-with-pulumi-and-go/</guid>
      <description>&lt;p&gt;I use &lt;a href=&#34;https://www.pulumi.com/&#34;&gt;Pulumi&lt;/a&gt; to manage my lab infrastructure on &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; (I shared some of the details in &lt;a href=&#34;https://www.pulumi.com/blog/supporting-kubernetes-with-pulumi/&#34;&gt;this April 2020 blog post&lt;/a&gt; published on the Pulumi site). Originally I started with &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, but later switched to &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;. Recently I had a need to add some VPC peering relationships to my lab configuration. I was concerned that this may pose some problems&amp;mdash;due entirely to the way I structure my Pulumi projects and stacks&amp;mdash;but as it turned out it was more straightforward than I expected. In this post, I&amp;rsquo;ll share some example code and explain what I learned in the process of writing it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using the AWS CLI to Tag Groups of AWS Resources</title>
      <link>https://www.howellyang.com/2021/08/23/using-aws-cli-tag-groups-of-aws-resources/</link>
      <pubDate>Mon, 23 Aug 2021 12:20:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/23/using-aws-cli-tag-groups-of-aws-resources/</guid>
      <description>&lt;p&gt;To conduct some testing, I recently needed to spin up a group of &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; clusters on AWS. Generally speaking, my &amp;ldquo;weapon of choice&amp;rdquo; for something like this is &lt;a href=&#34;https://cluster-api.sigs.k8s.io/&#34;&gt;Cluster API (CAPI)&lt;/a&gt; with the AWS provider. Normally this would be enormously simple. In this particular case&amp;mdash;for reasons that I won&amp;rsquo;t bother going into here&amp;mdash;I needed to spin up all these clusters in a single VPC. This presents a problem for the &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws/&#34;&gt;Cluster API Provider for AWS (CAPA)&lt;/a&gt;, as it currently doesn&amp;rsquo;t add some required tags to existing AWS infrastructure (see &lt;a href=&#34;https://github.com/kubernetes-sigs/cluster-api-provider-aws/issues/2584&#34;&gt;this issue&lt;/a&gt;). The fix is to add the tags manually, so in this post I&amp;rsquo;ll share how I used the AWS CLI to add the necessary tags.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Adding Multiple Items Using Kustomize JSON 6902 Patches</title>
      <link>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</link>
      <pubDate>Wed, 07 Jul 2021 17:50:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/07/07/adding-multiple-items-using-kustomize-json-6902-patches/</guid>
      <description>&lt;p&gt;Recently, I needed to deploy a &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; cluster via &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API (CAPI)&lt;/a&gt; into a pre-existing AWS VPC. As I outlined in &lt;a href=&#34;https://www.howellyang.com/2019/09/09/consuming-preexisting-aws-infrastructure-with-cluster-api/&#34;&gt;this post&lt;/a&gt; from September 2019, this entails modifying the CAPI manifest to include the VPC ID and any associated subnet IDs, as well as &lt;a href=&#34;https://www.howellyang.com/2020/04/22/using-existing-aws-security-groups-with-cluster-api/&#34;&gt;referencing existing security groups&lt;/a&gt; where needed. I knew that I could use &lt;a href=&#34;https://kustomize.sigs.k8s.io/&#34;&gt;the &lt;code&gt;kustomize&lt;/code&gt; tool&lt;/a&gt; to make these changes in a declarative way, as I&amp;rsquo;d explored &lt;a href=&#34;https://www.howellyang.com/2019/11/12/using-kustomize-with-cluster-api-manifests/&#34;&gt;using &lt;code&gt;kustomize&lt;/code&gt; with Cluster API manifests&lt;/a&gt; some time ago. This time, though, I needed to add a list of items, not just modify an existing value. In this post, I&amp;rsquo;ll show you how I used a JSON 6902 patch with &lt;code&gt;kustomize&lt;/code&gt; to add a list of items to a CAPI manifest.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using WireGuard on macOS via the CLI</title>
      <link>https://www.howellyang.com/2021/06/28/using-wireguard-on-mac-via-cli/</link>
      <pubDate>Mon, 28 Jun 2021 08:05:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/06/28/using-wireguard-on-mac-via-cli/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a few different posts on &lt;a href=&#34;https://www.wireguard.com&#34;&gt;WireGuard&lt;/a&gt;, the &amp;ldquo;simple yet fast and modern VPN&amp;rdquo; (as described by the WireGuard web site) that aims to supplant tools like IPSec and OpenVPN. My &lt;a href=&#34;https://www.howellyang.com/2021/02/22/setting-up-wireguard-for-aws-vpc-access/&#34;&gt;first post on WireGuard&lt;/a&gt; showed how to configure WireGuard on Linux, both on the client side as well as on the server side. After that, I followed it up with posts on &lt;a href=&#34;https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/&#34;&gt;using the GUI WireGuard app to configure WireGuard on macOS&lt;/a&gt; and&amp;mdash;most recently&amp;mdash;&lt;a href=&#34;https://www.howellyang.com/2021/06/22/making-wireguard-from-homebrew-work-on-an-m1-mac/&#34;&gt;making WireGuard from Homebrew work on an M1-based Mac&lt;/a&gt;. In this post, I&amp;rsquo;m going to take a look at using WireGuard on macOS again, but this time via the CLI.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Installing Older Versions of Kumactl on an M1 Mac</title>
      <link>https://www.howellyang.com/2021/06/25/installing-older-versions-of-kumactl-on-an-m1-mac/</link>
      <pubDate>Fri, 25 Jun 2021 15:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/06/25/installing-older-versions-of-kumactl-on-an-m1-mac/</guid>
      <description>&lt;p&gt;The Kuma community &lt;a href=&#34;https://kuma.io/blog/2021/kuma-1-2-0/&#34;&gt;recently released version 1.2.0&lt;/a&gt; of the open source Kuma service mesh, and along with it a corresponding version of &lt;code&gt;kumactl&lt;/code&gt;, the command-line utility for interacting with Kuma. To make it easy for macOS users to get &lt;code&gt;kumactl&lt;/code&gt;, the Kuma community maintains a &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; formula for the CLI utility. That includes providing M1-native (ARM64) macOS binaries for &lt;code&gt;kumactl&lt;/code&gt;. Unfortunately, installing an earlier version of &lt;code&gt;kumactl&lt;/code&gt; on an M1-based Mac using Homebrew is somewhat less than ideal. Here&amp;rsquo;s one way&amp;mdash;probably not the only way&amp;mdash;to work around some of the challenges.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making Firefox on Linux use Private Browsing by Default</title>
      <link>https://www.howellyang.com/2021/04/13/making-firefox-on-linux-use-private-browsing-by-default/</link>
      <pubDate>Tue, 13 Apr 2021 16:15:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/04/13/making-firefox-on-linux-use-private-browsing-by-default/</guid>
      <description>&lt;p&gt;While there are a couple different methods to make &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/products/&#34;&gt;Firefox&lt;/a&gt; use private browsing by default (see &lt;a href=&#34;https://ccm.net/faq/15012-how-to-start-firefox-in-private-mode-by-default&#34;&gt;this page&lt;/a&gt; for a couple methods), these methods essentially &lt;em&gt;force&lt;/em&gt; private browsing and disable the ability to use &amp;ldquo;regular&amp;rdquo; (non-private) browsing. In this post, I&amp;rsquo;ll describe what I consider to be a better way of achieving this, at least on Linux.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using WireGuard on macOS</title>
      <link>https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/</link>
      <pubDate>Thu, 01 Apr 2021 17:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/</guid>
      <description>&lt;p&gt;A short while ago I published a post on &lt;a href=&#34;https://www.howellyang.com/2021/02/22/setting-up-wireguard-for-aws-vpc-access/&#34;&gt;setting up WireGuard for AWS VPC access&lt;/a&gt;. In that post, I focused on the use of Linux on both the server side (on an EC2 instance in your AWS VPC) as well as on the client side (using the GNOME Network Manager interface). However, &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard&lt;/a&gt; is not limited to Linux, and I recently configured one of my macOS systems to take advantage of this WireGuard infrastructure for access to the private subnets in my AWS VPC. In this post, I&amp;rsquo;ll walk readers through configuring macOS to use WireGuard.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
