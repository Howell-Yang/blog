<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Education on Scott&#39;s Weblog</title>
    <link>https://www.howellyang.com/categories/education/</link>
    <description>Recent content in Education on Scott&#39;s Weblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Aug 2021 06:00:00 -0600</lastBuildDate><atom:link href="https://www.howellyang.com/categories/education/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Starting WireGuard Interfaces Automatically with Launchd on macOS</title>
      <link>https://www.howellyang.com/2021/08/04/starting-wireguard-interfaces-automatically-launchd-macos/</link>
      <pubDate>Wed, 04 Aug 2021 06:00:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/04/starting-wireguard-interfaces-automatically-launchd-macos/</guid>
      <description>&lt;p&gt;In late June of this year, I wrote a piece on &lt;a href=&#34;https://www.howellyang.com/2021/06/28/using-wireguard-on-mac-via-cli/&#34;&gt;using WireGuard on macOS via the CLI&lt;/a&gt;, where I walked readers using macOS through how to configure and use the &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard VPN&lt;/a&gt; from the terminal (as opposed to using the GUI client, which I discussed &lt;a href=&#34;https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/&#34;&gt;here&lt;/a&gt;). In that post, I briefly mentioned that I was planning to explore how to have macOS&amp;rsquo; &lt;code&gt;launchd&lt;/code&gt; automatically start WireGuard interfaces. In this post, I&amp;rsquo;ll show you how to do exactly that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>An Alternate Approach to etcd Certificate Generation with Kubeadm</title>
      <link>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</link>
      <pubDate>Tue, 03 Aug 2021 15:25:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/08/03/alternate-approach-etcd-certificate-generation-kubeadm/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve written a fair amount about &lt;code&gt;kubeadm&lt;/code&gt;, which was my preferred way of bootstrapping &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; clusters until &lt;a href=&#34;https://cluster-api.sigs.k8s.io&#34;&gt;Cluster API&lt;/a&gt; arrived. Along the way, I&amp;rsquo;ve also discussed using &lt;code&gt;kubeadm&lt;/code&gt; to assist with setting up etcd, the distributed key-value store leveraged by the Kubernetes control plane (see &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;here&lt;/a&gt;, &lt;a href=&#34;https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/&#34;&gt;here&lt;/a&gt;, and &lt;a href=&#34;https://www.howellyang.com/2020/04/02/setting-up-etcd-with-kubeadm-containerd-edition/&#34;&gt;here&lt;/a&gt;). In this post, I&amp;rsquo;d like to revisit the topic of using &lt;code&gt;kubeadm&lt;/code&gt; to set up an etcd cluster once again, this time taking a look at an alternate approach to generating the necessary TLS certificates than what the official documentation describes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making WireGuard from Homebrew Work on an M1 Mac</title>
      <link>https://www.howellyang.com/2021/06/22/making-wireguard-from-homebrew-work-on-an-m1-mac/</link>
      <pubDate>Tue, 22 Jun 2021 08:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/06/22/making-wireguard-from-homebrew-work-on-an-m1-mac/</guid>
      <description>&lt;p&gt;After writing &lt;a href=&#34;https://www.howellyang.com/2021/04/01/using-wireguard-on-macos/&#34;&gt;the post on using WireGuard on macOS&lt;/a&gt; (using the official &lt;a href=&#34;https://www.wireguard.com&#34;&gt;WireGuard&lt;/a&gt; GUI app from the Mac App Store), I found the GUI app&amp;rsquo;s behavior to be less than ideal. For example, tunnels marked as on-demand would later show up as no longer configured as an on-demand tunnel. When I decided to set up WireGuard on my M1-based MacBook Pro (see &lt;a href=&#34;https://www.howellyang.com/2021/06/02/review-2020-m1-based-macbook-pro/&#34;&gt;my review&lt;/a&gt; of the M1 MacBook Pro), I didn&amp;rsquo;t want to use the GUI app. Fortunately, &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt; has formulas for WireGuard. Unfortunately, the WireGuard tools as installed by Homebrew on an M1-based Mac won&amp;rsquo;t work. Here&amp;rsquo;s how to fix that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kubernetes Port Names and Terminating HTTPS Traffic on AWS</title>
      <link>https://www.howellyang.com/2021/06/21/kubernetes-port-names-and-terminating-https-traffic-on-aws/</link>
      <pubDate>Mon, 21 Jun 2021 16:30:00 -0600</pubDate>
      
      <guid>https://www.howellyang.com/2021/06/21/kubernetes-port-names-and-terminating-https-traffic-on-aws/</guid>
      <description>&lt;p&gt;I recently came across something that wasn&amp;rsquo;t immediately intuitive with regard to terminating HTTPS traffic on an AWS Elastic Load Balancer (ELB) when using &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; on AWS. At least, it wasn&amp;rsquo;t intuitive to &lt;em&gt;me&lt;/em&gt;, and I&amp;rsquo;m guessing that it may not be intuitive to some other readers as well. Kudos to my teammates &lt;a href=&#34;https://twitter.com/hhoover&#34;&gt;Hart Hoover&lt;/a&gt; and Brent Yarger for identifying the resolution, which I&amp;rsquo;m going to call out in this post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Assigning Node Labels During Kubernetes Cluster Bootstrapping</title>
      <link>https://www.howellyang.com/2020/11/30/assigning-node-labels-during-kubernetes-cluster-bootstrapping/</link>
      <pubDate>Mon, 30 Nov 2020 12:00:00 -0700</pubDate>
      
      <guid>https://www.howellyang.com/2020/11/30/assigning-node-labels-during-kubernetes-cluster-bootstrapping/</guid>
      <description>&lt;p&gt;Given that &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; is a primary focus of my day-to-day work, I spend a fair amount of time in &lt;a href=&#34;https://kubernetes.slack.com/&#34;&gt;the Kubernetes Slack community&lt;/a&gt;, trying to answer questions from users and generally be helpful. Recently, someone asked about assigning node labels while bootstrapping a cluster with &lt;code&gt;kubeadm&lt;/code&gt;. I answered the question, but afterward started thinking that it might be a good idea to also share that same information via a blog post&amp;mdash;my thinking being that others who also had the same question aren&amp;rsquo;t likely to be able to find my answer on Slack, but would be more likely to find a published blog post. So, in this post, I&amp;rsquo;ll show how to assign node labels while bootstrapping a Kubernetes cluster.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More on Setting up etcd with Kubeadm</title>
      <link>https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/</link>
      <pubDate>Mon, 29 Oct 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/10/29/more-on-setting-up-etcd-with-kubeadm/</guid>
      <description>&lt;p&gt;A while ago I wrote about &lt;a href=&#34;https://www.howellyang.com/2018/08/21/bootstrapping-etcd-cluster-with-tls-using-kubeadm/&#34;&gt;using &lt;code&gt;kubeadm&lt;/code&gt; to bootstrap an etcd cluster with TLS&lt;/a&gt;. In that post, I talked about one way to establish a secure etcd cluster using &lt;code&gt;kubeadm&lt;/code&gt; and running etcd as systemd units. In this post, I want to focus on a slightly different approach: running etcd as static pods. The information on this post is intended to build upon the information already available in the Kubernetes official documentation, not serve as a replacement.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Populating New Namespaces Using Heptio Ark</title>
      <link>https://www.howellyang.com/2018/08/22/populating-new-namespaces-using-heptio-ark/</link>
      <pubDate>Wed, 22 Aug 2018 19:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/08/22/populating-new-namespaces-using-heptio-ark/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/heptio/ark&#34;&gt;Heptio Ark&lt;/a&gt; is a tool designed to backup and restore &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; cluster resources and persistent volumes. As such, it enables users to do a bunch of very useful things like copy cluster resources across cloud providers or replicate environments for development, staging, testing, QA, etc. In this post, I&amp;rsquo;ll share a slightly different use case for Ark: populating resources into new Kubernetes namespaces.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Troubleshooting TLS Certificates</title>
      <link>https://www.howellyang.com/2018/08/20/troubleshooting-tls-certificates/</link>
      <pubDate>Mon, 20 Aug 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/08/20/troubleshooting-tls-certificates/</guid>
      <description>&lt;p&gt;I was recently working on a blog post involving the use of TLS certificates for encryption and authentication, and was running into errors. I&amp;rsquo;d checked all the &amp;ldquo;usual suspects&amp;rdquo;&amp;mdash;AWS security groups, host-level firewall rules (via &lt;code&gt;iptables&lt;/code&gt;), and the application configuration itself&amp;mdash;but still couldn&amp;rsquo;t get it to work. When I did finally find the error, I figured it was probably worth sharing the commands I used in the event others might find it helpful.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>More Handy CLI Tools for JSON</title>
      <link>https://www.howellyang.com/2018/06/28/more-handy-cli-tools-json/</link>
      <pubDate>Thu, 28 Jun 2018 08:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/06/28/more-handy-cli-tools-json/</guid>
      <description>&lt;p&gt;In late 2015 I wrote &lt;a href=&#34;https://www.howellyang.com/2015/11/11/handy-cli-tool-json/&#34;&gt;a post about a command-line tool named &lt;code&gt;jq&lt;/code&gt;&lt;/a&gt;, which is used for parsing JSON data. Since that time I&amp;rsquo;ve referenced &lt;code&gt;jq&lt;/code&gt; in a number of different blog posts (like &lt;a href=&#34;https://www.howellyang.com/2018/05/23/quick-post-parsing-aws-instance-data-with-jq/&#34;&gt;this one&lt;/a&gt;). However, &lt;code&gt;jq&lt;/code&gt; is not the only game in town for parsing JSON data at the command line. In this post, I&amp;rsquo;ll share a couple more handy CLI tools for working with JSON data.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Quick Intro to the AWS CLI</title>
      <link>https://www.howellyang.com/2018/06/22/a-quick-intro-to-aws-cli/</link>
      <pubDate>Fri, 22 Jun 2018 08:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/06/22/a-quick-intro-to-aws-cli/</guid>
      <description>&lt;p&gt;This post provides a (very) basic introduction to the &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI (command-line interface)&lt;/a&gt; tool. It&amp;rsquo;s not intended to be a deep dive, nor is it intended to serve as a comprehensive reference guide (the &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/reference/&#34;&gt;AWS CLI docs&lt;/a&gt; nicely fill that need). I also assume that you already have a basic understanding of the key AWS concepts and terminology, so I won&amp;rsquo;t bore you with defining an instance, VPC, subnet, or security group.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Examining X.509 Certificates Embedded in Kubeconfig Files</title>
      <link>https://www.howellyang.com/2018/06/12/examining-x509-certificates-embedded-in-kubeconfig-files/</link>
      <pubDate>Tue, 12 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/06/12/examining-x509-certificates-embedded-in-kubeconfig-files/</guid>
      <description>&lt;p&gt;While exploring some of the intricacies around the use of X.509v3 certificates in &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;, I found myself wanting to be able to view the details of a certificate embedded in a kubeconfig file. (See &lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/&#34;&gt;this page&lt;/a&gt; if you&amp;rsquo;re unfamiliar with what a kubeconfig file is.) In this post, I&amp;rsquo;ll share with you the commands I used to accomplish this task.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using Variables in AWS Tags with Terraform</title>
      <link>https://www.howellyang.com/2018/06/11/using-variables-in-aws-tags-with-terraform/</link>
      <pubDate>Mon, 11 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/06/11/using-variables-in-aws-tags-with-terraform/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been working to deepen my &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; skills recently, and one avenue I&amp;rsquo;ve been using to help in this area is expanding my use of Terraform modules. If you&amp;rsquo;re unfamiliar with the idea of Terraform modules, you can liken them to &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; roles: a re-usable abstraction/function that is heavily parameterized and can be called/invoked as needed. Recently I wanted to add support for tagging AWS instances in a module I was building, and I found out that you can&amp;rsquo;t use variable interpolation in the normal way for AWS tags. Here&amp;rsquo;s a workaround I found in my research and testing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploring Kubernetes with Kubeadm, Part 1: Introduction</title>
      <link>https://www.howellyang.com/2018/06/05/exploring-kubernetes-kubeadm-part-1-introduction/</link>
      <pubDate>Tue, 05 Jun 2018 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2018/06/05/exploring-kubernetes-kubeadm-part-1-introduction/</guid>
      <description>&lt;p&gt;I recently started using &lt;code&gt;kubeadm&lt;/code&gt; more extensively than I had in the past to serve as the primary tool by which I stand up Kubernetes clusters. As part of this process, I also discovered the &lt;code&gt;kubeadm alpha phase&lt;/code&gt; subcommand, which exposes different sections (phases) of the process that &lt;code&gt;kubeadm init&lt;/code&gt; follows when bootstrapping a cluster. In this blog post, I&amp;rsquo;d like to kick off a series of posts that explore how one could use the &lt;code&gt;kubeadm alpha phase&lt;/code&gt; command to better understand the different components within Kubernetes, the relationships between components, and some of the configuration items involved.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Quick Reference to Common AWS CLI Commands</title>
      <link>https://www.howellyang.com/2017/08/15/quick-reference-common-aws-cli-commands/</link>
      <pubDate>Tue, 15 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2017/08/15/quick-reference-common-aws-cli-commands/</guid>
      <description>&lt;p&gt;This post provides an extremely basic &amp;ldquo;quick reference&amp;rdquo; to some commonly-used &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;AWS CLI&lt;/a&gt; commands. It&amp;rsquo;s not intended to be a deep dive, nor is it intended to serve as any sort of comprehensive reference (the &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/reference/&#34;&gt;AWS CLI docs&lt;/a&gt; nicely fill that need).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Customizing Docker Engine on CentOS Atomic Host</title>
      <link>https://www.howellyang.com/2017/03/02/customizing-docker-centos-atomic-host/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.howellyang.com/2017/03/02/customizing-docker-centos-atomic-host/</guid>
      <description>I&amp;rsquo;ve been spending some time recently with CentOS Atomic Host, the container-optimized version of CentOS (part of Project Atomic). By default, the Docker Engine on CentOS Atomic Host listens only to a local UNIX socket, and is not accessible over the network. While CentOS has its own particular way of configuring the Docker Engine, I wanted to see if I could&amp;mdash;in a very &amp;ldquo;systemd-like&amp;rdquo; fashion&amp;mdash;make Docker Engine on CentOS listen on a network socket as well as a local UNIX socket.</description>
    </item>
    
  </channel>
</rss>
